# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@2.3.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-test-sonar:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/2.0/executor-types/
    parameters:
      max-tries:
        default: 1
        description: |
          Max number of tries. To disable retries, set this to 1.
        type: integer
      java-version:
        default: 17
        description: |
          The version of OpenJDK to change to
        type: integer
    executor:
      name: android/android-machine
      tag: 2021.10.1

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - run:
          command: |-
            #!/bin/bash
             CURRENT_JAVA_VER="$( java -version 2>&1 | head -1 | cut -d'"' -f2 | sed '/^1\./s///' | cut -d'.' -f1 )"
                    CURRENT_JAVAC_VER="$( javac -version 2>&1 | head -1 | cut -f 2- -d ' ' | sed '/^1\./s///' | cut -d'.' -f1 )"
                    echo "Current Java Version: $CURRENT_JAVA_VER"
                    echo "Current Java Compiler Version : $CURRENT_JAVAC_VER"
                    if [ "$CURRENT_JAVA_VER" -ne "${PARAM_JAVA_VER}" ]; then
                      if [ "${PARAM_JAVA_VER}" -eq 8 ] || [ "${PARAM_JAVA_VER}" -eq 17 ]; then
                        if [ "${PARAM_JAVA_VER}" -eq 8 ]; then
                          sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
                        else
                          sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
                        fi
                        sudo update-alternatives --set javac /usr/lib/jvm/java-"${PARAM_JAVA_VER}"-openjdk-amd64/bin/javac
                      else
                        sudo apt install openjdk-"${PARAM_JAVA_VER}"-jdk
                        sudo update-alternatives --set javac /usr/lib/jvm/java-"${PARAM_JAVA_VER}"-openjdk-amd64/bin/javac
                        sudo update-alternatives --set java /usr/lib/jvm/java-"${PARAM_JAVA_VER}"-openjdk-amd64/bin/java
                      fi
                      echo "export JAVA_HOME=/usr/lib/jvm/java-${PARAM_JAVA_VER}-openjdk-amd64" >> ~/.bashrc
                      echo "export PATH=$JAVA_HOME/bin:$PATH" >> ~/.bashrc
                    fi
                    NEW_JAVA_VER="$( java -version 2>&1 | head -1 | cut -d'"' -f2 | sed '/^1\./s///' | cut -d'.' -f1 )"
                    NEW_JAVAC_VER="$( javac -version 2>&1 | head -1 | cut -f 2- -d ' ' | sed '/^1\./s///' | cut -d'.' -f1 )"
                    echo "New Java Version : $NEW_JAVA_VER"
                    echo "New Java Compiler Version : $NEW_JAVAC_VER"
          environment:
            PARAM_JAVA_VER: << parameters.java-version >>
          name: Change OpenJDK version to << parameters.java-version >>

      # Checkout the code as the first step.
      - checkout

        # Restore saved gradle cache if exist
      - android/restore-gradle-cache

      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint testDebug --continue

      # save cache for saving build time
      - android/save-gradle-cache

      - store_test_results:
          path: app/build/test-results

      # And finally run the debug build
      - run:
          name: Assemble debug build
          command: |
            ./gradlew assembleDebug

      - store_artifacts:
          path: app/build/outputs/apk/debug/
          destination: apk

      - run:
          name: SonarCloud analysis
          command: ./gradlew sonar

workflows:
  main-workflow:
    jobs:
      - build-test-sonar



