# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@1.0.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/2.0/executor-types/
    executor:
      name: android/android-machine

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

        # Restore saved gradle cache if exist
      - android/restore-gradle-cache

      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint testDebug --continue

      # save cache for saving build time
      - android/save-gradle-cache

      - store_test_results:
          path: app/build/test-results

      # Then start the emulator and run the Instrumentation tests!
      # No need to running the Instrumentation tests for now
#      - android/start-emulator-and-run-tests:
#          test-command: ./gradlew connectedDebugAndroidTest
#          system-image: system-images;android-25;google_apis;x86

      # And finally run the release build
      - run:
          name: Assemble debug build
          command: |
            ./gradlew assembleDebug

      - run:
          name: Assemble APK and AAB
          command: ./script/build_assemble.sh

      - store_artifacts:
          path: app/build/outputs/apk/debug/
          destination: apk

  sonarcloud-checks:
    executor:
      name: android/android-machine

    steps:
      - checkout
      - run:
          name: SonarCloud analysis
          command: ./gradlew sonar -Dsonar.host.url="https://sonarcloud.io" -Dsonar.organization="solite" -Dsonar.projectKey="solite_pos" -Dsonar.login=$SONAR_TOKEN

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  main-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - sonarcloud-checks:
          requires:
            - build-and-test



